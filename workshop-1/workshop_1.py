# -*- coding: utf-8 -*-
"""workshop-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XRt7-yngQOx15sQkjXCLt-tjIWroh9sd
"""

"""
  This file contains the workshop-1

  Author: Juan Pablo Sotelo Rativa
  Date: Mar-15th-2024
"""
class Engine:
  """
    This class represent the structure of any engine
  """

  # Constructor
  def __init__(self, name, type_engine, potency, weight):

    # Attributes of the class
    self.name = name
    self.type_engine = type_engine
    self.potency = potency
    self.weight = weight

class Vehicle:
  """
    This class represent the structure and behaviors of any vehicle
  """

  # Constructor
  def __init__(self, engine: Engine, chasis: str, model: str, year: int):

    # Attributes of the class
    self.engine = engine
    self.chasis = chasis
    self.model = model
    self.year = year
    self.gas_consumption = self.cal_gas()

  def cal_gas(self) -> float:

    """
      This method calculated and returns the gas consumption

      Returns:
      . (str) gas consumption
    """
    if(self.chasis == "A"):
      val_chasis = 0.3
    else:
      val_chasis = 0.5

    return (1.1*self.engine.potency)+(0.2*self.engine.weight)-val_chasis

class Car:
  """
    This class represent the structure and behaviors of any Car
  """
  def __init__(self, engine, chasis, model, year):
    super().__init__(engine, chasis, model, year)

class Truck:
  """
    This class represent the structure and behaviors of any Truck
  """
  def __init__(self, engine, chasis, model, year):
    super().__init__(engine, chasis, model, year)

class Yacht:
  """
    This class represent the structure and behaviors of any Yacht
  """
  def __init__(self, engine, chasis, model, year):
    super().__init__(engine, chasis, model, year)

class Motorcycle:
  """
    This class represent the structure and behaviors of any Motorcycle
  """
  def __init__(self, engine, chasis, model, year):
    super().__init__(engine, chasis, model, year)

engines = []
vehicles = []
print(len(engines))

message = """Select an option:
 1.Create engine
 2.Create vehicle
 3.Show all vehicles
 4.Find vehicle by year
 5.Find vehicle by engine potency
 6.Exit"""

option = 0

while(option != 6):
  print(message)
  option = int(input())
  if(option == 1):
    print("----------Create Engine----------")
    name = str(input("Name: "))
    type_engine = str(input("Type: "))
    potency = float(input("Potency: "))
    weight = float(input("Weight: "))
    engines.append(Engine(name,type_engine, potency, weight))
    print(engines[0].potency)
  elif(option == 2):
    if(len(engines) == 0):
      print("There are no engines")
    else:
      print("----------Create Vehicle---------")

      print("Select an type of vehicle: ")
      print(" 1. Car \n 2. Truck \n 3.Yacht \n 4.Motorcycle ")
      opt_type = int(input())

      print("Select an engine: ")
      size = 0
      for value in engines:
        size += 1
        print(size,". ",value.name)
      opt_eng = int(input())

      print("Select an chasis: ")
      print("1. A \n 2. B")
      opt_chas = int(input())
      if(opt_chas == 1):
        chasis = "A"
      else:
        chasis = "B"

      model = str(input("Model: "))
      year = int(input("Year: "))

      if(opt_type == 1):
        vehicles.append(Vehicle(engines[opt_eng-1],chasis,model,year))
      elif(opt_type == 2):
        vehicles.append(Vehicle(engines[opt_eng-1],chasis,model,year))
      elif(opt_type == 3):
        vehicles.append(Vehicle(engines[opt_eng-1],chasis,model,year))
      elif(opt_type == 4):
        vehicles.append(Vehicle(engines[opt_eng-1],chasis,model,year))
  elif(option == 3):
    size = 0
    for value in vehicles:
      size += 1
      print("Vehicle ",size,": \n Engine: ",value.engine.name,"\n Chasis: ",value.chasis,"\n Model: ",value.model,"\n Year: ",value.year,"\n Gas consumption: ",value.gas_consumption)

